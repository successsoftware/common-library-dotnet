@inject IJSRuntime JSRuntime
@inherits InputBase<string>

<input id="@Id" @attributes="AdditionalAttributes" class="@CssClass" @bind="CurrentValueAsString" type="text" />

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string ReturnValue { get; set; }    
    [Parameter]
    public bool ReturnRawValue { get; set; } = true;
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Id))
            Id = Guid.NewGuid().ToString();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var pattern = AdditionalAttributes["data-mask"].ToString();             
            var isRegEx = pattern.StartsWith("/") && pattern.EndsWith("/");
            if (isRegEx)
                pattern = pattern.TrimStart('/').TrimEnd('/');
            await JSRuntime.InvokeVoidAsync("mask", Id, pattern, isRegEx, ReturnRawValue, DotNetObjectReference.Create(this));
        }
    }
    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    [JSInvokable]
    public void returnCurrentValue(string value)
    {
        ReturnValue = value;
    }
}